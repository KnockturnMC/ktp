From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <lynxplay101@gmail.com>
Date: Mon, 6 Dec 2021 05:27:13 +0100
Subject: [PATCH] Expose low level interceptor for vehicle steering

To allow plugins to run their own steering logic when a player is
steering an entity that, by vanilla's design choices, does not react to
vehicle movement packets, this patch introduces new API plugins can use
to handle these packets.

To keep the API as fast and lightweight as possible, the spigot event
bus was previously optimized and is now called off the main thread
before the packet even begins processing. While this obviously prevents
acceess to the world, it also allows intercepting events to prevent main
thread sync for these packets.

diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 946407a98b6c3a351a3c852f7d6cda5b4a68592f..d1fb2a8d25328e156acf853e2233ec14a57f0a02 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -562,7 +562,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     @Override
     public void handlePlayerInput(ServerboundPlayerInputPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
-        this.player.setPlayerInput(packet.getXxa(), packet.getZza(), packet.isJumping(), packet.isShiftKeyDown());
+        // KTP start - expose low level interceptor for vehicle steering
+        final var event = new dev.lynxplay.ktp.event.packet.PlayerPassengerInputEventEvent(
+            this.player.getBukkitEntity(), packet.getXxa(), packet.getZza(), packet.isJumping(), packet.isShiftKeyDown()
+        );
+        if (!event.callEvent()) return;
+        this.player.setPlayerInput(event.sidewaysMovement(), event.forwardsMovement(), event.jumping(), event.sneaking());
+        // KTP end - expose low level interceptor for vehicle steering
     }
 
     private static boolean containsInvalidValues(double x, double y, double z, float yaw, float pitch) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 10164cd7854a30e530f56c595b504ab24d10c2a6..662b604af39765bf55bf0b7f800429c47ac885d0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1445,4 +1445,30 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return !this.getHandle().level.noCollision(this.getHandle(), aabb);
     }
     // Paper End - Collision API
+    // KTP start
+
+    @Override
+    public void move(@org.jetbrains.annotations.NotNull final dev.lynxplay.ktp.entity.MovementCause movementCause,
+                     @org.jetbrains.annotations.NotNull final Vector vector) {
+        final var internalMovementCause = switch (movementCause) {
+            case SELF -> net.minecraft.world.entity.MoverType.SELF;
+            case PLAYER -> net.minecraft.world.entity.MoverType.PLAYER;
+            case PISTON -> net.minecraft.world.entity.MoverType.PISTON;
+            case SHULKER -> net.minecraft.world.entity.MoverType.SHULKER;
+            case SHULKER_BOX -> net.minecraft.world.entity.MoverType.SHULKER_BOX;
+        };
+        this.entity.move(internalMovementCause, new net.minecraft.world.phys.Vec3(vector.getX(), vector.getY(), vector.getZ()));
+    }
+
+    @Override
+    public void physics(final boolean physics) {
+        this.entity.noPhysics = !physics;
+    }
+
+    @Override
+    public boolean physics() {
+        return !this.entity.noPhysics;
+    }
+    // KTP end
+
 }
