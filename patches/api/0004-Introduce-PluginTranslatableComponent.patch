From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jatyn Stacy <jlee0964@gmail.com>
Date: Thu, 25 Nov 2021 02:28:53 +0100
Subject: [PATCH] Introduce PluginTranslatableComponent

This patch implements the plugin translatable component interface and
implementation that is an additional component that may be used in
combination with the adventure text api.

A plugin translatable component is a translatable-like component that only
holds a key that is matched to a localized message when rendered. The
difference between a translatable component and a plugin translatable
component is the fact that the translation the plugin translatable
component represents is parsed using the mini message parser and
arguments are passed in as a single tag resolver.

Besides the addition of the plugin translatable component, this patch
also introduces a basic layout to allow plugins to quickly load
translator instances to supply the servers translator with translations
for the added plugin translatable components.

Co-authored-by: Bjarne Koll <lynxplay101@gmail.com>

diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslationBundle.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslationBundle.java
new file mode 100644
index 0000000000000000000000000000000000000000..846090a0e05f3a9974b2770178a55846289daa4c
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslationBundle.java
@@ -0,0 +1,28 @@
+package dev.lynxplay.ktp.adventure.translation;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Locale;
+
+/**
+ * A plugin translation bundle is a collection of all available locales a plugin may be translated including all translation keys and their
+ * translations for each locale.
+ * <p>
+ * The translation bundle to that degree is hence a representation of all registered translations available.
+ */
+public interface PluginTranslationBundle {
+
+    /**
+     * Queries the translation bundle for a specific translation based on the passed locale and translation key.
+     * This query can be expected to be performed in two map lookups and hence can be considered relatively cheap.
+     *
+     * @param locale         the locale to query for. If the translation bundle does not contain the locale at all, no translation will be returned.
+     * @param translationKey the translation key of the translation to find. This is the primary identified. If no translation for the translation key
+     *                       could be found in the locale, no translation is returned.
+     *
+     * @return the translation found in the bundle if the bundled contained both the locale and the locale contained the translation key.
+     */
+    @Nullable String findTranslation(@NotNull Locale locale, @NotNull String translationKey);
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslators.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslators.java
new file mode 100644
index 0000000000000000000000000000000000000000..ae1a67086cd6974596d538ed987c81c69199b7d0
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslators.java
@@ -0,0 +1,165 @@
+package dev.lynxplay.ktp.adventure.translation;
+
+import com.google.common.base.Preconditions;
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationParseException;
+import dev.lynxplay.ktp.adventure.translation.parser.TranslationFileParser;
+import dev.lynxplay.ktp.adventure.translation.parser.TranslationLocaleParser;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.PluginTranslatableComponent;
+import net.kyori.adventure.text.renderer.TranslatableComponentRenderer;
+import net.kyori.adventure.translation.GlobalTranslator;
+import net.kyori.adventure.translation.Translator;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.Locale;
+
+/**
+ * The plugin translators interface is the main entry point for registering and creating translations for plugins that may be consumed by creating
+ * {@link PluginTranslatableComponent}s.
+ */
+public interface PluginTranslators {
+
+    /**
+     * Parses a complete translation bundle from the filesystem using a locale and file parser.
+     * This method is hence expected to perform IO operations and should be moved off the main server thread.
+     *
+     * @param translationRoot         the root path under which all translation files that should be parsed can be found.
+     * @param translationLocaleParser the locale parser that parses the locale for each file found in the {@code translationRoot}.
+     * @param translationFileParser   the file parser that is to be used to parse each file into a map of translation keys and translations.
+     *
+     * @return the parsed plugin translation bundle including all parsed locales and their translation maps.
+     *
+     * @throws IllegalArgumentException  if the passed {@code translationRoot} does not represent a folder on the filesystem.
+     * @throws TranslationParseException if the translations could not be read, parsed or found in the first place by file parser.
+     */
+    @NotNull PluginTranslationBundle parseTranslationBundle(@NotNull Path translationRoot,
+                                                            @NotNull TranslationLocaleParser translationLocaleParser,
+                                                            @NotNull TranslationFileParser translationFileParser) throws TranslationParseException;
+
+    /**
+     * Creates a new adventure translator that may be registered on the {@link net.kyori.adventure.translation.GlobalTranslator} to take effect.
+     * <p>
+     * This method is a direct delegate to the {@link #createPluginTranslator(String, PluginTranslationBundle)} method by using the plugins name
+     * as a namespace. More specifically {@link Plugin#getName()} converted to lowercase.
+     * <p>
+     * The namespace is prefixed and joined using a plain '.'.
+     * An example would be the translation key 'message.player.join' and the plugin named 'Example' which would produced a final effective translation
+     * key of 'example.message.player.join'
+     *
+     * @param plugin                  the plugin instance that defines the namespace this plugin translator should be responsible for.
+     * @param pluginTranslationBundle the plugin translation bundle holding all the translations the plugin has for its messages.
+     *
+     * @return the translator instance that is capable of translating all translations in the translation bundle prefixed with the namespace.
+     */
+    default @NotNull Translator createPluginTranslator(@NotNull Plugin plugin, @NotNull PluginTranslationBundle pluginTranslationBundle) {
+        Preconditions.checkNotNull(plugin, "The passed plugin was null");
+        return this.createPluginTranslator(plugin.getName().toLowerCase(Locale.ROOT), pluginTranslationBundle);
+    }
+
+    /**
+     * Creates a new adventure translator that may be registered on the {@link net.kyori.adventure.translation.GlobalTranslator} to take effect.
+     * <p>
+     * The namespace is prefixed and joined using a plain '.'.
+     * An example would be the translation key 'message.player.join' and the plugin named 'Example' which would produced a final effective translation
+     * key of 'example.message.player.join'
+     *
+     * @param namespace               the namespace this plugin translator should be responsible for.
+     * @param pluginTranslationBundle the plugin translation bundle holding all the translations the plugin has for its messages.
+     *
+     * @return the translator instance that is capable of translating all translations in the translation bundle prefixed with the namespace.
+     */
+    @NotNull Translator createPluginTranslator(@NotNull String namespace, @NotNull PluginTranslationBundle pluginTranslationBundle);
+
+    /**
+     * Provides the plugin translator renderer that will be used to render {@link PluginTranslatableComponent} on the server.
+     * The translator is exposed as using the {@link net.kyori.adventure.translation.GlobalTranslator}'s {@link GlobalTranslator#renderer()} will
+     * not properly render {@link PluginTranslatableComponent}.
+     * <p>
+     * <b>
+     * The renderer should only be used when passing {@link PluginTranslatableComponent} to non packet methods, e.g. the modification of an
+     * items or block entities.
+     * </b>
+     * <p>
+     * <b>The render is automatically used for any form of direct text communication with the player.</b>
+     *
+     * @return the renderer the plugin translator uses to render {@link PluginTranslatableComponent}s.
+     */
+    @NotNull TranslatableComponentRenderer<Locale> renderer();
+
+    /**
+     * Renders a component using the {@link #renderer()} provided.
+     *
+     * @param component the component that should be rendered.
+     * @param context   the context, or more specifically, the locale in which this component should be rendered.
+     *
+     * @return the rendered component
+     */
+    default @NotNull Component render(final @NotNull Component component, final @NotNull Locale context) {
+        return this.renderer().render(component, context);
+    }
+
+    /**
+     * Provides a static immutable implementation of the translation file parser that is capable of parsing yaml files.
+     * Yaml files are parsed by constructing the translation key as a combination of each node above a value.
+     * <p>
+     * Example given:
+     * <pre>
+     * message:
+     *   player:
+     *     join: 'You joined the game'
+     * </pre>
+     * would be parsed into a single translation, namely the translation key 'message.player.join' mapped to 'You joined the game'.
+     *
+     * @return the yaml parser instance.
+     */
+    @NotNull TranslationFileParser yamlTranslationFileParser();
+
+    /**
+     * Provides a static immutable implementation of the translation file parser that is capable of parsing properties files.
+     * Since properties files cannot contain hierarchical data, the mappings are taken verbatim from the file.
+     * <p>
+     * Example given:
+     * <pre>
+     *  message.player.join=You joined the game
+     * </pre>
+     * would be parsed as a translation mapping the key 'message.player.join' to the value 'You joined the game'.
+     *
+     * @return the properties parser instance.
+     */
+    @NotNull TranslationFileParser propertiesTranslationFileParser();
+
+    /**
+     * Provides a static immutable implementation of the translation file parser that is capable of parsing json files.
+     * Json files are parsed by constructing the translation key as a combination of each node above a value.
+     * <p>
+     * Example given:
+     * <pre>
+     * {
+     *   "message": {
+     *     "player": {
+     *       "join": "You joined the game"
+     *     }
+     *   }
+     * }
+     * </pre>
+     * would be parsed into a single translation, namely the translation key 'message.player.join' mapped to 'You joined the game'.
+     *
+     * @return the json parser instance.
+     */
+    @NotNull TranslationFileParser jsonTranslationFileParser();
+
+    /**
+     * Provides a static immutable implementation of the translation locale parser that parses the locale of a file simply based on the base file
+     * name, ignoring the extension.
+     * <p>
+     * Example given:
+     * The file 'plugins/Example/language/en.json' would be parsed to {@link java.util.Locale#ENGLISH}.
+     * Notably this uses {@link net.kyori.adventure.translation.Translator#parseLocale(String)}, so country code and variants are also accepted.
+     *
+     * @return the file name based locale parser.
+     */
+    @NotNull TranslationLocaleParser filenameTranslationLocaleParser();
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationLocaleParserException.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationLocaleParserException.java
new file mode 100644
index 0000000000000000000000000000000000000000..c705749f71f73a6acd8de48913826a7919b42e88
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationLocaleParserException.java
@@ -0,0 +1,19 @@
+package dev.lynxplay.ktp.adventure.translation.exception;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A plain runtime exception that may be thrown if a locale parser fails to parse the locale of a translation file.
+ */
+public final class TranslationLocaleParserException extends RuntimeException {
+
+    /**
+     * Creates a new locale parser exception.
+     *
+     * @param message the message that contains more detailed information about why the exception is thrown.
+     */
+    public TranslationLocaleParserException(@NotNull String message) {
+        super(message);
+    }
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationParseException.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationParseException.java
new file mode 100644
index 0000000000000000000000000000000000000000..8e7760bd8f43dd854d6364f94fb9b14a807be5ae
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationParseException.java
@@ -0,0 +1,30 @@
+package dev.lynxplay.ktp.adventure.translation.exception;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A plain runtime exception that may be thrown if translations failed to be parsed from the filesystem due to os level exception or format
+ * exceptions.
+ */
+public final class TranslationParseException extends RuntimeException {
+
+    /**
+     * Creates a new translation parse exception.
+     *
+     * @param message the message that contains more detailed information about why the exception is thrown.
+     */
+    public TranslationParseException(@NotNull String message) {
+        super(message);
+    }
+
+    /**
+     * Creates a new translation parse exception.
+     *
+     * @param message the message that contains more detailed information about why the exception is thrown.
+     * @param cause   the underlying throwable that caused this exception to be thrown.
+     */
+    public TranslationParseException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationFileParser.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationFileParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..3fbb1df01ab11c18fadfaecaec13ba356024e4d4
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationFileParser.java
@@ -0,0 +1,25 @@
+package dev.lynxplay.ktp.adventure.translation.parser;
+
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationParseException;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.Map;
+
+/**
+ * A file parser that reads in a file and converts it into a map of translations keys to their respective translation.
+ */
+public interface TranslationFileParser {
+
+    /**
+     * Parses a file found on the systems file system into a map of translations keys to their respective translations.
+     *
+     * @param file the file to parse represented as a java path.
+     *
+     * @return the constructed map of translations keys to translations.
+     *
+     * @throws TranslationParseException if the file parser failed to parse the file located at the given path for whatever reason.
+     */
+    @NotNull Map<String, String> parseTranslations(@NotNull Path file) throws TranslationParseException;
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationLocaleParser.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationLocaleParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..6af66024b8c8adf7aac86578581cff8e15d0ea8b
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationLocaleParser.java
@@ -0,0 +1,26 @@
+package dev.lynxplay.ktp.adventure.translation.parser;
+
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationLocaleParserException;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.Locale;
+
+/**
+ * A parser that converts translation file paths to the locale they hold translations for.
+ */
+@FunctionalInterface
+public interface TranslationLocaleParser {
+
+    /**
+     * Parses the locale of a translation file using a translations file {@link Path}.
+     *
+     * @param path the path of the translations file.
+     *
+     * @return the parsed locale the translations file represents.
+     *
+     * @throws TranslationLocaleParserException if the parser failed to parse a locale from the path provided.
+     */
+    @NotNull Locale parseLocale(@NotNull Path path) throws TranslationLocaleParserException;
+
+}
diff --git a/src/main/java/net/kyori/adventure/text/KTPComponents.java b/src/main/java/net/kyori/adventure/text/KTPComponents.java
new file mode 100644
index 0000000000000000000000000000000000000000..4f89fe457d9f6ba02a0197973ac48ff14558c3cd
--- /dev/null
+++ b/src/main/java/net/kyori/adventure/text/KTPComponents.java
@@ -0,0 +1,88 @@
+package net.kyori.adventure.text;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * KTP-API specific methods and constants that may be used to work with {@link net.kyori.adventure.text.Component}s and
+ * their likes.
+ */
+public class KTPComponents {
+
+    /**
+     * Creates a plugin translatable component fully configured with a key, tag resolver and mini message instance.
+     *
+     * @param key                 the translation key of the plugin translatable component.
+     * @param tagResolver         the tag resolver that resolves the tags in the translated message.
+     * @param miniMessageInstance the mini message instance that should be used to de-serialize the raw translation string message.
+     *
+     * @return a new immutable plugin translatable component.
+     *
+     * @since 1.17.1
+     */
+    public static @NotNull PluginTranslatableComponent pluginTranslatable(@NotNull final String key,
+                                                                          @NotNull final net.kyori.adventure.text.minimessage.tag.resolver.TagResolver tagResolver,
+                                                                          @NotNull final net.kyori.adventure.text.minimessage.MiniMessage miniMessageInstance) {
+        return new PluginTranslatableComponentImpl(
+            java.util.Collections.emptyList(),
+            net.kyori.adventure.text.format.Style.empty(),
+            key,
+            tagResolver,
+            miniMessageInstance
+        );
+    }
+
+    /**
+     * Creates a plugin translatable component configured with a key and a tag resolver.
+     * A default mini message instance will be used.
+     *
+     * @param key         the translation key of the plugin translatable component.
+     * @param tagResolver the tag resolver that resolves the tags in the translated message.
+     *
+     * @return a new immutable plugin translatable component.
+     *
+     * @since 1.17.1
+     */
+    public static @NotNull PluginTranslatableComponent pluginTranslatable(@NotNull final String key,
+                                                                          @NotNull final net.kyori.adventure.text.minimessage.tag.resolver.TagResolver tagResolver) {
+        return new PluginTranslatableComponentImpl(
+            java.util.Collections.emptyList(),
+            net.kyori.adventure.text.format.Style.empty(),
+            key,
+            tagResolver,
+            net.kyori.adventure.text.minimessage.MiniMessage.miniMessage()
+        );
+    }
+
+    /**
+     * Creates a plugin translatable component configured with a key.
+     * An empty tag resolver will be used, meaning no tags will be resolved. Additionally, a default mini message instance will be used.
+     *
+     * @param key the translation key of the plugin translatable component.
+     *
+     * @return a new immutable plugin translatable component.
+     *
+     * @since 1.17.1
+     */
+    public static @NotNull PluginTranslatableComponent pluginTranslatable(@NotNull final String key) {
+        return new PluginTranslatableComponentImpl(
+            java.util.Collections.emptyList(),
+            net.kyori.adventure.text.format.Style.empty(),
+            key,
+            net.kyori.adventure.text.minimessage.tag.resolver.TagResolver.empty(),
+            net.kyori.adventure.text.minimessage.MiniMessage.miniMessage()
+        );
+    }
+
+    /**
+     * Creates a builder for the plugin translatable component.
+     * The builder is not configured with any default values and will need to be filled.
+     *
+     * @return a mutable builder for the plugin translatable component.
+     *
+     * @since 1.17.1
+     */
+    public static @NotNull PluginTranslatableComponent.Builder pluginTranslatable() {
+        return new PluginTranslatableComponentImpl.BuilderImpl();
+    }
+
+}
diff --git a/src/main/java/net/kyori/adventure/text/PluginTranslatableComponent.java b/src/main/java/net/kyori/adventure/text/PluginTranslatableComponent.java
new file mode 100644
index 0000000000000000000000000000000000000000..baa2c2f2b25bf99f887b10a6a4479a8c6032fed3
--- /dev/null
+++ b/src/main/java/net/kyori/adventure/text/PluginTranslatableComponent.java
@@ -0,0 +1,156 @@
+package net.kyori.adventure.text;
+
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.TagResolver;
+import net.kyori.adventure.translation.Translatable;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Objects;
+
+/**
+ * The plugin translatable component is a form a {@link net.kyori.adventure.text.TranslatableComponent}. Similarly to a translatable component
+ * it is constructed using only a {@link net.kyori.adventure.translation.Translatable} key, however the translation of this key is expected
+ * to be representing a translation that is in the mini-message format.
+ */
+public interface PluginTranslatableComponent extends BuildableComponent<PluginTranslatableComponent, PluginTranslatableComponent.Builder>,
+    ScopedComponent<PluginTranslatableComponent> {
+
+    /**
+     * Gets the translation key.
+     *
+     * @return the translation key
+     *
+     * @since 1.17.1
+     */
+    @NotNull String key();
+
+    /**
+     * Sets the translation key.
+     *
+     * @param translatable the translatable object to get the key from
+     *
+     * @return a plugin translatable component
+     *
+     * @since 1.17.1
+     */
+    @Contract(pure = true)
+    default @NotNull PluginTranslatableComponent key(final @NotNull Translatable translatable) {
+        return this.key(Objects.requireNonNull(translatable, "translatable").translationKey());
+    }
+
+    /**
+     * Sets the translation key.
+     *
+     * @param key the translation key
+     *
+     * @return a plugin translatable component
+     *
+     * @since 1.17.1
+     */
+    @Contract(pure = true)
+    @NotNull PluginTranslatableComponent key(final @NotNull String key);
+
+    /**
+     * Gets the unmodifiable instance of the tag resolver that is currently used by the component to resolve the tags found inside.
+     *
+     * @return the unmodifiable tag resolver instance.
+     *
+     * @since 1.17.1
+     */
+    @NotNull TagResolver tagResolver();
+
+    /**
+     * Sets the tag resolver that should be used to resolve tags found.
+     *
+     * @param tagResolver the tag resolver instance.
+     *
+     * @return a plugin translatable component
+     *
+     * @since 1.17.1
+     */
+    @Contract(pure = true)
+    @NotNull PluginTranslatableComponent tagResolver(final @NotNull TagResolver tagResolver);
+
+    /**
+     * Provides the mini message instance to use when rendering the translatable component.
+     *
+     * @return the mini message instance that this component used by the component to render it.
+     *
+     * @since 1.17.1
+     */
+    @NotNull MiniMessage miniMessageInstance();
+
+    /**
+     * Sets the mini message instance to use when rendering the translatable component.
+     *
+     * @param miniMessageInstance the mini message instance that should be used by the component to render it.
+     *
+     * @return a new plugin translatable component.
+     *
+     * @since 1.17.1
+     */
+    @Contract(pure = true)
+    @NotNull PluginTranslatableComponent miniMessageInstance(final @NotNull MiniMessage miniMessageInstance);
+
+    /**
+     * A text component builder for the plugin translatable component.
+     *
+     * @since 1.17.1
+     */
+    @SuppressWarnings("NonExtendableApiUsage")
+    interface Builder extends ComponentBuilder<PluginTranslatableComponent, PluginTranslatableComponent.Builder> {
+
+        /**
+         * Sets the translation key.
+         *
+         * @param translatable the translatable object to get the key from
+         *
+         * @return this builder
+         *
+         * @since 1.17.1
+         */
+        @Contract(pure = true)
+        default @NotNull PluginTranslatableComponent.Builder key(final @NotNull Translatable translatable) {
+            return this.key(Objects.requireNonNull(translatable, "translatable").translationKey());
+        }
+
+        /**
+         * Sets the translation key.
+         *
+         * @param key the translation key
+         *
+         * @return this builder
+         *
+         * @since 1.17.1
+         */
+        @Contract("_ -> this")
+        @NotNull PluginTranslatableComponent.Builder key(final @NotNull String key);
+
+        /**
+         * Sets the tag resolver that should be used to resolve tags found.
+         *
+         * @param tagResolver the tag resolver instance.
+         *
+         * @return this builder.
+         *
+         * @since 1.17.1
+         */
+        @Contract(pure = true)
+        @NotNull PluginTranslatableComponent.Builder tagResolver(final @NotNull TagResolver tagResolver);
+
+        /**
+         * Sets the mini message instance to use when rendering this translatable component.
+         *
+         * @param miniMessageInstance the mini message instance that should be used by the component to render it.
+         *
+         * @return this builder
+         *
+         * @since 1.17.1
+         */
+        @Contract("_ -> this")
+        @NotNull PluginTranslatableComponent.Builder miniMessageInstance(final @NotNull MiniMessage miniMessageInstance);
+
+    }
+
+}
diff --git a/src/main/java/net/kyori/adventure/text/PluginTranslatableComponentImpl.java b/src/main/java/net/kyori/adventure/text/PluginTranslatableComponentImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..3368a06f218c0632f7b32c40c9e3b5413ad4e243
--- /dev/null
+++ b/src/main/java/net/kyori/adventure/text/PluginTranslatableComponentImpl.java
@@ -0,0 +1,154 @@
+package net.kyori.adventure.text;
+
+import net.kyori.adventure.text.format.Style;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.TagResolver;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.List;
+import java.util.Objects;
+
+import static java.util.Objects.requireNonNull;
+
+final class PluginTranslatableComponentImpl implements PluginTranslatableComponent {
+
+    @NotNull private final List<Component> children;
+    @NotNull private final Style style;
+    @NotNull private final String key;
+    @NotNull private final MiniMessage miniMessageInstance;
+    @NotNull private final TagResolver tagResolver;
+
+    public PluginTranslatableComponentImpl(@NotNull List<? extends ComponentLike> children,
+                                           @NotNull Style style,
+                                           @NotNull String key, @NotNull TagResolver tagResolver,
+                                           @NotNull MiniMessage miniMessageInstance) {
+        this.children = ComponentLike.asComponents(children, IS_NOT_EMPTY);
+        this.style = requireNonNull(style, "style");
+        this.key = requireNonNull(key, "key");
+        this.tagResolver = requireNonNull(tagResolver, "tagResolver");
+        this.miniMessageInstance = requireNonNull(miniMessageInstance, "miniMessageInstance");
+    }
+
+    @Override
+    public @NotNull String key() {
+        return this.key;
+    }
+
+    @Override
+    public @NotNull PluginTranslatableComponent key(@NotNull String key) {
+        requireNonNull(key, "key");
+        return new PluginTranslatableComponentImpl(this.children, this.style, key, this.tagResolver, this.miniMessageInstance);
+    }
+
+    @Override
+    public @NotNull TagResolver tagResolver() {
+        return this.tagResolver;
+    }
+
+    @Override
+    public @NotNull PluginTranslatableComponent tagResolver(@NotNull TagResolver tagResolver) {
+        requireNonNull(tagResolver, "tagResolver");
+        return new PluginTranslatableComponentImpl(this.children, this.style, this.key, tagResolver, this.miniMessageInstance);
+    }
+
+    @Override
+    public @NotNull MiniMessage miniMessageInstance() {
+        return this.miniMessageInstance;
+    }
+
+    @Override
+    public @NotNull PluginTranslatableComponent miniMessageInstance(@NotNull MiniMessage miniMessageInstance) {
+        requireNonNull(miniMessageInstance, "miniMessageInstance");
+        return new PluginTranslatableComponentImpl(this.children, this.style, this.key, this.tagResolver, miniMessageInstance);
+    }
+
+    @Override
+    public @Unmodifiable @NotNull List<Component> children() {
+        return this.children;
+    }
+
+    @Override
+    public @NotNull PluginTranslatableComponent children(@NotNull List<? extends ComponentLike> children) {
+        requireNonNull(children, "children");
+        return new PluginTranslatableComponentImpl(children, this.style, this.key, this.tagResolver, this.miniMessageInstance);
+    }
+
+    @Override
+    public @NotNull Style style() {
+        return this.style;
+    }
+
+    @Override
+    public @NotNull PluginTranslatableComponent style(@NotNull Style style) {
+        requireNonNull(style, "style");
+        return new PluginTranslatableComponentImpl(this.children, style, this.key, this.tagResolver, this.miniMessageInstance);
+    }
+
+    @Override
+    public boolean equals(final @Nullable Object other) {
+        if (this == other) return true;
+        if (!(other instanceof PluginTranslatableComponent that)) return false;
+        if (!super.equals(other)) return false;
+        return Objects.equals(this.key, that.key()) && Objects.equals(this.tagResolver, that.tagResolver());
+    }
+
+    @Override
+    public int hashCode() {
+        int result = this.children.hashCode();
+        result = (31 * result) + this.style.hashCode();
+        result = (31 * result) + this.key.hashCode();
+        result = (31 * result) + this.tagResolver.hashCode();
+        result = (31 * result) + this.miniMessageInstance.hashCode();
+        return result;
+    }
+
+    @Override
+    public @NotNull PluginTranslatableComponent.Builder toBuilder() {
+        return new BuilderImpl(this);
+    }
+
+    static final class BuilderImpl extends AbstractComponentBuilder<PluginTranslatableComponent, PluginTranslatableComponent.Builder> implements PluginTranslatableComponent.Builder {
+
+        private @Nullable String key;
+        private TagResolver tagResolver = TagResolver.empty();
+        private MiniMessage miniMessageInstance = MiniMessage.miniMessage();
+
+        BuilderImpl() {
+        }
+
+        BuilderImpl(final @NotNull PluginTranslatableComponent component) {
+            super(component);
+            this.key = component.key();
+            this.tagResolver = component.tagResolver();
+            this.miniMessageInstance = component.miniMessageInstance();
+        }
+
+        @Override
+        public @NotNull PluginTranslatableComponent.Builder key(final @NotNull String key) {
+            this.key = key;
+            return this;
+        }
+
+        @Override
+        public @NotNull PluginTranslatableComponent.Builder tagResolver(@NotNull TagResolver tagResolver) {
+            this.tagResolver = tagResolver;
+            return this;
+        }
+
+        @Override
+        public @NotNull PluginTranslatableComponent.Builder miniMessageInstance(@NotNull MiniMessage miniMessageInstance) {
+            this.miniMessageInstance = miniMessageInstance;
+            return this;
+        }
+
+        @Override
+        public @NotNull PluginTranslatableComponentImpl build() {
+            if (this.key == null) throw new IllegalStateException("key must be set");
+            return new PluginTranslatableComponentImpl(this.children, this.buildStyle(), this.key, this.tagResolver, this.miniMessageInstance);
+        }
+
+    }
+
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index ac9b690fcccb60b587e5345f12f1383afd0a73a1..8857eebca12148be0d75d5266e715b74cfffd35f 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2459,6 +2459,15 @@ public final class Bukkit {
         return server.getPotionBrewer();
     }
     // Paper end
+    // KTP start
+    /**
+     * Returns the plugin translator of the server that plugins may use to register custom translations.
+     * @return the plugin translator instance.
+     */
+    public static @NotNull dev.lynxplay.ktp.adventure.translation.PluginTranslators pluginTranslators() {
+        return server.pluginTranslators();
+    }
+    // KTP end
 
     @NotNull
     public static Server.Spigot spigot() {
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 2204336d8800311b65e894739ab1b27273e7c6f2..a7d915a0cdb59cf39bd13892d772bee8977fc17d 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2139,4 +2139,12 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     @NotNull org.bukkit.potion.PotionBrewer getPotionBrewer();
     // Paper end
+
+    // KTP start
+    /**
+     * Returns the plugin translator of the server that plugins may use to register custom translations.
+     * @return the plugin translator instance.
+     */
+    @org.jetbrains.annotations.NotNull dev.lynxplay.ktp.adventure.translation.PluginTranslators pluginTranslators();
+    // KTP end
 }
diff --git a/src/test/java/net/kyori/adventure/text/PluginTranslatableComponentImplTest.java b/src/test/java/net/kyori/adventure/text/PluginTranslatableComponentImplTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..c43ed43ef3678c30085d983b0bc459c764c7f337
--- /dev/null
+++ b/src/test/java/net/kyori/adventure/text/PluginTranslatableComponentImplTest.java
@@ -0,0 +1,47 @@
+package net.kyori.adventure.text;
+
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder;
+import net.kyori.adventure.text.minimessage.tag.resolver.TagResolver;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class PluginTranslatableComponentImplTest {
+
+    @Test
+    public void key() {
+        final var component = new PluginTranslatableComponentImpl.BuilderImpl().key("test.key").build();
+        Assert.assertEquals("test.key", component.key());
+
+        final var updateComponent = component.key("test.updated");
+        Assert.assertEquals("test.updated", updateComponent.key());
+    }
+
+    @Test(expected = IllegalStateException.class)
+    public void keyBuilderUnset() {
+        new PluginTranslatableComponentImpl.BuilderImpl().build();
+    }
+
+    @Test
+    public void tagResolver() {
+        final var tagResolverOne = TagResolver.resolver(Placeholder.component("test", Component.text("test")));
+        final var component = new PluginTranslatableComponentImpl.BuilderImpl().key("test.key").tagResolver(tagResolverOne).build();
+        Assert.assertEquals(tagResolverOne, component.tagResolver());
+
+        final var tagResolverTwo = TagResolver.standard();
+        final var updateComponent = component.tagResolver(tagResolverTwo);
+        Assert.assertEquals(tagResolverTwo, updateComponent.tagResolver());
+    }
+
+    @Test
+    public void miniMessageInstance() {
+        final var miniMessageOne = MiniMessage.builder().build();
+        final var component = new PluginTranslatableComponentImpl.BuilderImpl().key("test.key").miniMessageInstance(miniMessageOne).build();
+        Assert.assertEquals(miniMessageOne, component.miniMessageInstance());
+
+        final var miniMessageTwo = MiniMessage.builder().strict(true).build();
+        final var updateComponent = component.miniMessageInstance(miniMessageTwo);
+        Assert.assertEquals(miniMessageTwo, updateComponent.miniMessageInstance());
+    }
+
+}
