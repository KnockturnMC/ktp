From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jatyn Stacy <jlee0964@gmail.com>
Date: Thu, 25 Nov 2021 02:28:53 +0100
Subject: [PATCH] Introduce PluginTranslatableComponent

This patch implements the plugin translatable component interface and
implementation that is an additional component that may be used in
combination with the adventure text api.

A plugin translatable component is a translatable-like component that only
holds a key that is matched to a localized message when rendered. The
difference between a translatable component and a plugin translatable
component is the fact that the translation the plugin translatable
component represents is parsed using the mini message parser and
arguments are passed in as a single tag resolver.

Besides the addition of the plugin translatable component, this patch
also introduces a basic layout to allow plugins to quickly load
translator instances to supply the servers translator with translations
for the added plugin translatable components.

Co-authored-by: Bjarne Koll <lynxplay101@gmail.com>

diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/KTPTranslatableComponentFactory.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/KTPTranslatableComponentFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..439a40089cc385baba7f0ac0fb82e7e276de66ff
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/KTPTranslatableComponentFactory.java
@@ -0,0 +1,36 @@
+package dev.lynxplay.ktp.adventure.translation;
+
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.ComponentLike;
+import net.kyori.adventure.text.TranslatableComponent;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Locale;
+
+/**
+ * The ktp translatable component factory may be used for constructing {@link net.kyori.adventure.text.TranslatableComponent} instances
+ * that, in combination with the {@link org.bukkit.Bukkit#render(net.kyori.adventure.text.Component, Locale)} can hold mini message content.
+ * <p>
+ * The factory is to be used in a plugins language class for constructing {@link net.kyori.adventure.text.TranslatableComponent} instances that have a
+ * sensible fallback applied to them, so that accidental usage of {@link net.kyori.adventure.text.TranslatableComponent} that are only registered
+ * server side do not fail horribly on the client.
+ */
+public interface KTPTranslatableComponentFactory {
+
+    /**
+     * Constructs a translatable component for a given key.
+     * The translatable component will hold the {@link TranslatableComponent#key()} and {@link TranslatableComponent#args()} passed to this method.
+     * <p>
+     * Furthermore, this translatable component will have a {@link TranslatableComponent#fallback()} configured that matches the english translation
+     * of the passed key.
+     * If no translation for the key can be found at the time of this method's invocation, the fallback is not set.
+     *
+     * @param key       the key of the translatable component.
+     * @param arguments the arguments of the translatable components.
+     *
+     * @return the created translatable component.
+     */
+    @NotNull
+    TranslatableComponent translatable(@NotNull String key, @NotNull ComponentLike... arguments);
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslationBundle.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslationBundle.java
new file mode 100644
index 0000000000000000000000000000000000000000..846090a0e05f3a9974b2770178a55846289daa4c
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslationBundle.java
@@ -0,0 +1,28 @@
+package dev.lynxplay.ktp.adventure.translation;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Locale;
+
+/**
+ * A plugin translation bundle is a collection of all available locales a plugin may be translated including all translation keys and their
+ * translations for each locale.
+ * <p>
+ * The translation bundle to that degree is hence a representation of all registered translations available.
+ */
+public interface PluginTranslationBundle {
+
+    /**
+     * Queries the translation bundle for a specific translation based on the passed locale and translation key.
+     * This query can be expected to be performed in two map lookups and hence can be considered relatively cheap.
+     *
+     * @param locale         the locale to query for. If the translation bundle does not contain the locale at all, no translation will be returned.
+     * @param translationKey the translation key of the translation to find. This is the primary identified. If no translation for the translation key
+     *                       could be found in the locale, no translation is returned.
+     *
+     * @return the translation found in the bundle if the bundled contained both the locale and the locale contained the translation key.
+     */
+    @Nullable String findTranslation(@NotNull Locale locale, @NotNull String translationKey);
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslators.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslators.java
new file mode 100644
index 0000000000000000000000000000000000000000..c1f56e7156e1566ef26887e835a9a7dac396e497
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslators.java
@@ -0,0 +1,148 @@
+package dev.lynxplay.ktp.adventure.translation;
+
+import com.google.common.base.Preconditions;
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationParseException;
+import dev.lynxplay.ktp.adventure.translation.parser.TranslationFileParser;
+import dev.lynxplay.ktp.adventure.translation.parser.TranslationLocaleParser;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.ComponentLike;
+import net.kyori.adventure.text.renderer.TranslatableComponentRenderer;
+import net.kyori.adventure.translation.GlobalTranslator;
+import net.kyori.adventure.translation.Translator;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.Locale;
+
+/**
+ * The plugin translators interface is the main entry point for registering and creating translations for plugins that may be consumed by creating
+ * {@link net.kyori.adventure.text.TranslatableComponent}s.
+ */
+public interface PluginTranslators {
+
+    /**
+     * Constructs a component factory based on a given amount of {@link PluginTranslationBundle} instances.
+     * The passed translation bundles will be used to construct the fallback on the created components as defined in
+     * {@link KTPTranslatableComponentFactory#translatable(String, ComponentLike...)}.
+     *
+     * @param bundles the bundles the component factory is going to be based on.
+     *
+     * @return the created component factory.
+     */
+    @NotNull KTPTranslatableComponentFactory newComponentFactory(@NotNull PluginTranslationBundle... bundles);
+
+    /**
+     * Parses a complete translation bundle from the filesystem using a locale and file parser.
+     * This method is hence expected to perform IO operations and should be moved off the main server thread.
+     *
+     * @param translationRoot         the root path under which all translation files that should be parsed can be found.
+     * @param translationLocaleParser the locale parser that parses the locale for each file found in the {@code translationRoot}.
+     * @param translationFileParser   the file parser that is to be used to parse each file into a map of translation keys and translations.
+     *
+     * @return the parsed plugin translation bundle including all parsed locales and their translation maps.
+     *
+     * @throws IllegalArgumentException  if the passed {@code translationRoot} does not represent a folder on the filesystem.
+     * @throws TranslationParseException if the translations could not be read, parsed or found in the first place by file parser.
+     */
+    @NotNull PluginTranslationBundle parseTranslationBundle(@NotNull Path translationRoot,
+                                                            @NotNull TranslationLocaleParser translationLocaleParser,
+                                                            @NotNull TranslationFileParser translationFileParser) throws TranslationParseException;
+
+    /**
+     * Creates a new adventure translator that may be registered on the {@link net.kyori.adventure.translation.GlobalTranslator} to take effect.
+     * <p>
+     * This method is a direct delegate to the {@link #createPluginTranslator(String, PluginTranslationBundle)} method by using the plugins name
+     * as a namespace. More specifically {@link Plugin#getName()} converted to lowercase.
+     * <p>
+     * The namespace is prefixed and joined using a plain '.'.
+     * An example would be the translation key 'message.player.join' and the plugin named 'Example' which would produced a final effective translation
+     * key of 'example.message.player.join'
+     *
+     * @param plugin                  the plugin instance that defines the namespace this plugin translator should be responsible for.
+     * @param pluginTranslationBundle the plugin translation bundle holding all the translations the plugin has for its messages.
+     *
+     * @return the translator instance that is capable of translating all translations in the translation bundle prefixed with the namespace.
+     */
+    default @NotNull Translator createPluginTranslator(@NotNull Plugin plugin, @NotNull PluginTranslationBundle pluginTranslationBundle) {
+        Preconditions.checkNotNull(plugin, "The passed plugin was null");
+        return this.createPluginTranslator(plugin.getName().toLowerCase(Locale.ROOT), pluginTranslationBundle);
+    }
+
+    /**
+     * Creates a new adventure translator that may be registered on the {@link net.kyori.adventure.translation.GlobalTranslator} to take effect.
+     * <p>
+     * The namespace is prefixed and joined using a plain '.'.
+     * An example would be the translation key 'message.player.join' and the plugin named 'Example' which would produced a final effective translation
+     * key of 'example.message.player.join'
+     *
+     * @param namespace               the namespace this plugin translator should be responsible for.
+     * @param pluginTranslationBundle the plugin translation bundle holding all the translations the plugin has for its messages.
+     *
+     * @return the translator instance that is capable of translating all translations in the translation bundle prefixed with the namespace.
+     */
+    @NotNull Translator createPluginTranslator(@NotNull String namespace, @NotNull PluginTranslationBundle pluginTranslationBundle);
+
+    /**
+     * Provides a static immutable implementation of the translation file parser that is capable of parsing yaml files.
+     * Yaml files are parsed by constructing the translation key as a combination of each node above a value.
+     * <p>
+     * Example given:
+     * <pre>
+     * message:
+     *   player:
+     *     join: 'You joined the game'
+     * </pre>
+     * would be parsed into a single translation, namely the translation key 'message.player.join' mapped to 'You joined the game'.
+     *
+     * @return the yaml parser instance.
+     */
+    @NotNull TranslationFileParser yamlTranslationFileParser();
+
+    /**
+     * Provides a static immutable implementation of the translation file parser that is capable of parsing properties files.
+     * Since properties files cannot contain hierarchical data, the mappings are taken verbatim from the file.
+     * <p>
+     * Example given:
+     * <pre>
+     *  message.player.join=You joined the game
+     * </pre>
+     * would be parsed as a translation mapping the key 'message.player.join' to the value 'You joined the game'.
+     *
+     * @return the properties parser instance.
+     */
+    @NotNull TranslationFileParser propertiesTranslationFileParser();
+
+    /**
+     * Provides a static immutable implementation of the translation file parser that is capable of parsing json files.
+     * Json files are parsed by constructing the translation key as a combination of each node above a value.
+     * <p>
+     * Example given:
+     * <pre>
+     * {
+     *   "message": {
+     *     "player": {
+     *       "join": "You joined the game"
+     *     }
+     *   }
+     * }
+     * </pre>
+     * would be parsed into a single translation, namely the translation key 'message.player.join' mapped to 'You joined the game'.
+     *
+     * @return the json parser instance.
+     */
+    @NotNull TranslationFileParser jsonTranslationFileParser();
+
+    /**
+     * Provides a static immutable implementation of the translation locale parser that parses the locale of a file simply based on the base file
+     * name, ignoring the extension.
+     * <p>
+     * Example given:
+     * The file 'plugins/Example/language/en.json' would be parsed to {@link java.util.Locale#ENGLISH}.
+     * Notably this uses {@link net.kyori.adventure.translation.Translator#parseLocale(String)}, so country code and variants are also accepted.
+     *
+     * @return the file name based locale parser.
+     */
+    @NotNull TranslationLocaleParser filenameTranslationLocaleParser();
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationLocaleParserException.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationLocaleParserException.java
new file mode 100644
index 0000000000000000000000000000000000000000..c705749f71f73a6acd8de48913826a7919b42e88
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationLocaleParserException.java
@@ -0,0 +1,19 @@
+package dev.lynxplay.ktp.adventure.translation.exception;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A plain runtime exception that may be thrown if a locale parser fails to parse the locale of a translation file.
+ */
+public final class TranslationLocaleParserException extends RuntimeException {
+
+    /**
+     * Creates a new locale parser exception.
+     *
+     * @param message the message that contains more detailed information about why the exception is thrown.
+     */
+    public TranslationLocaleParserException(@NotNull String message) {
+        super(message);
+    }
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationParseException.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationParseException.java
new file mode 100644
index 0000000000000000000000000000000000000000..8e7760bd8f43dd854d6364f94fb9b14a807be5ae
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/exception/TranslationParseException.java
@@ -0,0 +1,30 @@
+package dev.lynxplay.ktp.adventure.translation.exception;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A plain runtime exception that may be thrown if translations failed to be parsed from the filesystem due to os level exception or format
+ * exceptions.
+ */
+public final class TranslationParseException extends RuntimeException {
+
+    /**
+     * Creates a new translation parse exception.
+     *
+     * @param message the message that contains more detailed information about why the exception is thrown.
+     */
+    public TranslationParseException(@NotNull String message) {
+        super(message);
+    }
+
+    /**
+     * Creates a new translation parse exception.
+     *
+     * @param message the message that contains more detailed information about why the exception is thrown.
+     * @param cause   the underlying throwable that caused this exception to be thrown.
+     */
+    public TranslationParseException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationFileParser.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationFileParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..3fbb1df01ab11c18fadfaecaec13ba356024e4d4
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationFileParser.java
@@ -0,0 +1,25 @@
+package dev.lynxplay.ktp.adventure.translation.parser;
+
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationParseException;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.Map;
+
+/**
+ * A file parser that reads in a file and converts it into a map of translations keys to their respective translation.
+ */
+public interface TranslationFileParser {
+
+    /**
+     * Parses a file found on the systems file system into a map of translations keys to their respective translations.
+     *
+     * @param file the file to parse represented as a java path.
+     *
+     * @return the constructed map of translations keys to translations.
+     *
+     * @throws TranslationParseException if the file parser failed to parse the file located at the given path for whatever reason.
+     */
+    @NotNull Map<String, String> parseTranslations(@NotNull Path file) throws TranslationParseException;
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationLocaleParser.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationLocaleParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..6af66024b8c8adf7aac86578581cff8e15d0ea8b
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/TranslationLocaleParser.java
@@ -0,0 +1,26 @@
+package dev.lynxplay.ktp.adventure.translation.parser;
+
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationLocaleParserException;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.Locale;
+
+/**
+ * A parser that converts translation file paths to the locale they hold translations for.
+ */
+@FunctionalInterface
+public interface TranslationLocaleParser {
+
+    /**
+     * Parses the locale of a translation file using a translations file {@link Path}.
+     *
+     * @param path the path of the translations file.
+     *
+     * @return the parsed locale the translations file represents.
+     *
+     * @throws TranslationLocaleParserException if the parser failed to parse a locale from the path provided.
+     */
+    @NotNull Locale parseLocale(@NotNull Path path) throws TranslationLocaleParserException;
+
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index f1af93319d6b29d7bc709e7e273e8abe26c7b4af..b9c0037ec90a80d39ce3a5d567478be9fbca9890 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -13,6 +13,8 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+
+import net.kyori.adventure.text.Component;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -2456,6 +2458,29 @@ public final class Bukkit {
         return server.getPotionBrewer();
     }
     // Paper end
+    // KTP start
+    /**
+     * Returns the plugin translator of the server that plugins may use to register custom translations.
+     * @return the plugin translator instance.
+     */
+    public static @NotNull dev.lynxplay.ktp.adventure.translation.PluginTranslators pluginTranslators() {
+        return server.pluginTranslators();
+    }
+
+    /**
+     * Renders the provided component, translating to the given locale if possible.
+     *
+     * @param component the component to render
+     * @param locale    the locale to translate the text to
+     *
+     * @return the rendered component
+     *
+     * @since 1.19.4
+     */
+    public static @NotNull Component render(@NotNull final Component component, @NotNull final java.util.Locale locale) {
+        return net.kyori.adventure.translation.GlobalTranslator.renderer().render(component, locale);
+    }
+    // KTP end
 
     @NotNull
     public static Server.Spigot spigot() {
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 8621dba7f10ab822b5b99ce0d05da58823605cb6..0090d9ba266f19e79eb3dba22b00d3a23c09e11c 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2136,4 +2136,12 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     @NotNull org.bukkit.potion.PotionBrewer getPotionBrewer();
     // Paper end
+
+    // KTP start
+    /**
+     * Returns the plugin translator of the server that plugins may use to register custom translations.
+     * @return the plugin translator instance.
+     */
+    @org.jetbrains.annotations.NotNull dev.lynxplay.ktp.adventure.translation.PluginTranslators pluginTranslators();
+    // KTP end
 }
diff --git a/src/test/java/net/kyori/adventure/text/PluginTranslatableComponentImplTest.java b/src/test/java/net/kyori/adventure/text/PluginTranslatableComponentImplTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..c43ed43ef3678c30085d983b0bc459c764c7f337
--- /dev/null
+++ b/src/test/java/net/kyori/adventure/text/PluginTranslatableComponentImplTest.java
@@ -0,0 +1,47 @@
+package net.kyori.adventure.text;
+
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder;
+import net.kyori.adventure.text.minimessage.tag.resolver.TagResolver;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class PluginTranslatableComponentImplTest {
+
+    @Test
+    public void key() {
+        final var component = new PluginTranslatableComponentImpl.BuilderImpl().key("test.key").build();
+        Assert.assertEquals("test.key", component.key());
+
+        final var updateComponent = component.key("test.updated");
+        Assert.assertEquals("test.updated", updateComponent.key());
+    }
+
+    @Test(expected = IllegalStateException.class)
+    public void keyBuilderUnset() {
+        new PluginTranslatableComponentImpl.BuilderImpl().build();
+    }
+
+    @Test
+    public void tagResolver() {
+        final var tagResolverOne = TagResolver.resolver(Placeholder.component("test", Component.text("test")));
+        final var component = new PluginTranslatableComponentImpl.BuilderImpl().key("test.key").tagResolver(tagResolverOne).build();
+        Assert.assertEquals(tagResolverOne, component.tagResolver());
+
+        final var tagResolverTwo = TagResolver.standard();
+        final var updateComponent = component.tagResolver(tagResolverTwo);
+        Assert.assertEquals(tagResolverTwo, updateComponent.tagResolver());
+    }
+
+    @Test
+    public void miniMessageInstance() {
+        final var miniMessageOne = MiniMessage.builder().build();
+        final var component = new PluginTranslatableComponentImpl.BuilderImpl().key("test.key").miniMessageInstance(miniMessageOne).build();
+        Assert.assertEquals(miniMessageOne, component.miniMessageInstance());
+
+        final var miniMessageTwo = MiniMessage.builder().strict(true).build();
+        final var updateComponent = component.miniMessageInstance(miniMessageTwo);
+        Assert.assertEquals(miniMessageTwo, updateComponent.miniMessageInstance());
+    }
+
+}
