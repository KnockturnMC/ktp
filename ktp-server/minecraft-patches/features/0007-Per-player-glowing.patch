From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <git@lynxplay.dev>
Date: Sun, 28 Sep 2025 20:15:28 +0200
Subject: [PATCH] Per-player glowing


diff --git a/net/minecraft/server/level/ServerEntity.java b/net/minecraft/server/level/ServerEntity.java
index d1a45e09b075346db819a9d39244ad08215db4ac..2cd581df385f61cd0607b47139ea529148585f20 100644
--- a/net/minecraft/server/level/ServerEntity.java
+++ b/net/minecraft/server/level/ServerEntity.java
@@ -352,7 +352,26 @@ public class ServerEntity {
         Packet<ClientGamePacketListener> addEntityPacket = this.entity.getAddEntityPacket(this);
         consumer.accept(addEntityPacket);
         if (this.trackedDataValues != null) {
-            consumer.accept(new ClientboundSetEntityDataPacket(this.entity.getId(), this.trackedDataValues));
+            // KTP start - per player glowing - correct initial entity data
+            List<SynchedEntityData.DataValue<?>> possiblyModifiedTrackedDataValues = this.trackedDataValues;
+            // 99% of cases should simply not run this if as their override is NOT_SET.
+            if (trackerData != null && trackerData.glowOverride != net.kyori.adventure.util.TriState.NOT_SET) {
+                // We have tracked data. Two things can happen here.
+                // Either the initial tracked values contains the shared flag, in which case we simply patch it
+                // Or it does not, in which case we need to add it only in case the override is set to true. No entity glows by default.
+                final int sharedDataFlagIndex = this.trackedPlayers.findSharedDataValueIndexIn(this.trackedDataValues);
+                if (sharedDataFlagIndex >= 0) {
+                    possiblyModifiedTrackedDataValues = trackerData.patch(this.trackedDataValues, sharedDataFlagIndex);
+                } else if (trackerData.glowOverride == net.kyori.adventure.util.TriState.TRUE) {
+                    // This case *could* be a bit more complex, but the client does not require sorted order on the data ids. So simply append.
+                    possiblyModifiedTrackedDataValues = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(this.trackedDataValues);
+                    possiblyModifiedTrackedDataValues.add(SynchedEntityData.DataValue.create(
+                        Entity.DATA_SHARED_FLAGS_ID, trackerData.patchSharedFlagForGlowOverride(this.entity.getEntityData().get(Entity.DATA_SHARED_FLAGS_ID))
+                    ));
+                }
+            }
+            // KTP end - per player glowing - correct initial entity data
+            consumer.accept(new ClientboundSetEntityDataPacket(this.entity.getId(), possiblyModifiedTrackedDataValues)); // KTP - per player glowing - use possibly modified list
         }
 
         if (this.entity instanceof LivingEntity livingEntity) {
@@ -419,8 +438,28 @@ public class ServerEntity {
     private void sendDirtyEntityData() {
         SynchedEntityData entityData = this.entity.getEntityData();
         List<SynchedEntityData.DataValue<?>> list = entityData.packDirty();
-        if (list != null) {
+        sendEntityDataIf: if (list != null) { // KTP - per player glowing
             this.trackedDataValues = entityData.getNonDefaultValues();
+            // KTP start - per player glowing
+            // Early check that *should* be false for 99% of entities that do not have glow overrides
+            perPlayerGlowingIf: if (this.trackedPlayers.hasAnyGlowOverrides != 0) {
+                final int sharedFlagIndex = this.trackedPlayers.findSharedDataValueIndexIn(list);
+                if (sharedFlagIndex == -1) break perPlayerGlowingIf;
+
+                for (final var trackerData : this.trackedPlayers.effectiveData()) {
+                    if (trackerData.glowOverride == net.kyori.adventure.util.TriState.NOT_SET) {
+                        trackerData.connection.send(new ClientboundSetEntityDataPacket(this.entity.getId(), list));
+                        continue;
+                    }
+
+                    trackerData.connection.send(new ClientboundSetEntityDataPacket(this.entity.getId(), trackerData.patch(
+                        list, sharedFlagIndex
+                    )));
+                }
+
+                break sendEntityDataIf;
+            }
+            // KTP end - per player glowing
             this.broadcastAndSend(new ClientboundSetEntityDataPacket(this.entity.getId(), list));
         }
 
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index d834d20c1c45befe2b5d0520e5c93cf0a512f477..c0c734f5bff6d9edf828ebdeb5fd630a04eddbba 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -291,7 +291,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public int invulnerableTime;
     protected boolean firstTick = true;
     protected final SynchedEntityData entityData;
-    protected static final EntityDataAccessor<Byte> DATA_SHARED_FLAGS_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BYTE);
+    public static final EntityDataAccessor<Byte> DATA_SHARED_FLAGS_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BYTE); // KTP - public
     protected static final int FLAG_ONFIRE = 0;
     private static final int FLAG_SHIFT_KEY_DOWN = 1;
     private static final int FLAG_SPRINTING = 3;
