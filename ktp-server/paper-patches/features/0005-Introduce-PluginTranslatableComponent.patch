From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jatyn Stacy <jlee0964@gmail.com>
Date: Tue, 20 May 2025 01:16:23 +0200
Subject: [PATCH] Introduce PluginTranslatableComponent

This patch implements the plugin translatable component interface and
implementation that is an additional component that may be used in
combination with the adventure text api.

A plugin translatable component is a translatable-like component that only
holds a key that is matched to a localized message when rendered. The
difference between a translatable component and a plugin translatable
component is the fact that the translation the plugin translatable
component represents is parsed using the mini message parser and
arguments are passed in as a single template resolver.

Besides the addition of the plugin translatable component, this patch
also introduces a basic layout to allow plugins to quickly load
translator instances to supply the servers translator with translations
for the added plugin translatable components.

Co-authored-by: Bjarne Koll <lynxplay101@gmail.com>

diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslationBundleImpl.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslationBundleImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..1a77226d6ad020692d8d4fb5c2084912c59289c2
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslationBundleImpl.java
@@ -0,0 +1,68 @@
+package dev.lynxplay.ktp.adventure.translation;
+
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Iterables;
+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * A straight forward implementation of the plugin translation bundle that uses a fast util map.
+ */
+public final class PluginTranslationBundleImpl implements PluginTranslationBundle {
+
+    private final Map<Locale, Map<String, String>> localeTranslationMappings;
+
+    public PluginTranslationBundleImpl(@NotNull Map<Locale, Map<String, String>> localeTranslationMappings) {
+        this.localeTranslationMappings = new Object2ObjectOpenHashMap<>();
+        for (final var localeMapEntry : localeTranslationMappings.entrySet()) {
+            this.localeTranslationMappings.put(localeMapEntry.getKey(), new Object2ObjectOpenHashMap<>(localeMapEntry.getValue()));
+        }
+    }
+
+    @Override
+    public @Nullable String findTranslation(@NotNull Locale locale, @NotNull String translationKey) {
+        var translationLocale = localeTranslationMappings.get(locale);
+        if (translationLocale == null) {
+            final var requestedLocaleRange = new Locale.LanguageRange(locale.toLanguageTag());
+            translationLocale = localeTranslationMappings.get(
+                Locale.lookup(Collections.singletonList(requestedLocaleRange), localeTranslationMappings.keySet())
+            );
+        }
+
+        if (translationLocale == null) {
+            translationLocale = localeTranslationMappings.get(Locale.ENGLISH);
+        }
+
+        if (translationLocale == null && !localeTranslationMappings.isEmpty()) {
+            translationLocale = localeTranslationMappings.get(Iterables.getFirst(localeTranslationMappings.keySet(), Locale.ENGLISH));
+        }
+
+        return translationLocale == null ? null : translationLocale.get(translationKey);
+    }
+
+    @Override
+    public @Unmodifiable Set<Locale> knownLocales() {
+        return ImmutableSet.copyOf(this.localeTranslationMappings.keySet());
+    }
+
+    @Override
+    public @Unmodifiable Set<String> joinedKnownKeys() {
+        final ImmutableSet.Builder<String> builder = ImmutableSet.builder();
+        for (final Map<String, String> value : localeTranslationMappings.values()) {
+            value.keySet().forEach(builder::add);
+        }
+        return builder.build();
+    }
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslatorsImpl.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslatorsImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..206ddd28d7dfc4027ea1033f26ec914bea5fe77c
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/PluginTranslatorsImpl.java
@@ -0,0 +1,91 @@
+package dev.lynxplay.ktp.adventure.translation;
+
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationParseException;
+import dev.lynxplay.ktp.adventure.translation.parser.FilenameTranslationLocaleParser;
+import dev.lynxplay.ktp.adventure.translation.parser.JsonTranslationFileParser;
+import dev.lynxplay.ktp.adventure.translation.parser.PropertiesTranslationFileParser;
+import dev.lynxplay.ktp.adventure.translation.parser.TranslationFileParser;
+import dev.lynxplay.ktp.adventure.translation.parser.TranslationLocaleParser;
+import dev.lynxplay.ktp.adventure.translation.parser.YamlTranslationFileParser;
+import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;
+import net.kyori.adventure.key.Key;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.translation.MiniMessageTranslationStore;
+import net.kyori.adventure.text.renderer.TranslatableComponentRenderer;
+import net.kyori.adventure.translation.Translator;
+import org.intellij.lang.annotations.Subst;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Stream;
+
+/**
+ * The server specific implementation of the plugin translators interface.
+ */
+public final class PluginTranslatorsImpl implements PluginTranslators {
+
+    private final TranslationFileParser YAML_TRANSLATION_FILE_PARSER = new YamlTranslationFileParser();
+    private final TranslationFileParser PROPERTIES_TRANSLATION_FILE_PARSER = new PropertiesTranslationFileParser();
+    private final TranslationFileParser JSON_TRANSLATION_FILE_PARSER = new JsonTranslationFileParser();
+    private final TranslationLocaleParser FILENAME_TRANSLATION_LOCALE_PARSER = new FilenameTranslationLocaleParser();
+
+    @Override
+    public @NotNull PluginTranslationBundle parseTranslationBundle(@NotNull Path translationRoot,
+                                                                   @NotNull TranslationLocaleParser translationLocaleParser,
+                                                                   @NotNull TranslationFileParser translationFileParser) throws TranslationParseException {
+        try (final Stream<Path> translationFileStream = Files.walk(translationRoot)) {
+            final List<Path> translationFiles = translationFileStream.filter(Files::isRegularFile).toList();
+
+            final Map<Locale, Map<String, String>> localeTranslationMappings = new Reference2ObjectOpenHashMap<>();
+            for (final var translationFile : translationFiles) {
+                final Locale locale = translationLocaleParser.parseLocale(translationFile);
+                final Map<String, String> translations = translationFileParser.parseTranslations(translationFile);
+
+                localeTranslationMappings.computeIfAbsent(locale, i -> new Reference2ObjectOpenHashMap<>()).putAll(translations);
+            }
+
+            return new PluginTranslationBundleImpl(localeTranslationMappings);
+        } catch (final IOException e) {
+            throw new TranslationParseException("Failed to read translation files from disk", e);
+        }
+    }
+
+    @Override
+    public @NotNull Translator createPluginTranslator(@Subst("plugin") @NotNull String namespace,
+                                                      @NotNull PluginTranslationBundle pluginTranslationBundle,
+                                                      @NotNull MiniMessage miniMessage) {
+        final MiniMessageTranslationStore store = MiniMessageTranslationStore.create(Key.key("ktp-plugin-translator", namespace), miniMessage);
+        final Set<String> allKeys = pluginTranslationBundle.joinedKnownKeys();
+        for (final Locale knownLocale : pluginTranslationBundle.knownLocales()) {
+            store.registerAll(knownLocale, allKeys, s -> pluginTranslationBundle.findTranslation(knownLocale, s));
+        }
+        return store;
+    }
+
+    @Override
+    public @NotNull TranslationFileParser yamlTranslationFileParser() {
+        return this.YAML_TRANSLATION_FILE_PARSER;
+    }
+
+    @Override
+    public @NotNull TranslationFileParser jsonTranslationFileParser() {
+        return this.JSON_TRANSLATION_FILE_PARSER;
+    }
+
+    @Override
+    public @NotNull TranslationFileParser propertiesTranslationFileParser() {
+        return this.PROPERTIES_TRANSLATION_FILE_PARSER;
+    }
+
+    @Override
+    public @NotNull TranslationLocaleParser filenameTranslationLocaleParser() {
+        return FILENAME_TRANSLATION_LOCALE_PARSER;
+    }
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/FilenameTranslationLocaleParser.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/FilenameTranslationLocaleParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..6a37f588aac5847ceb7245d22716d793e97ea224
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/FilenameTranslationLocaleParser.java
@@ -0,0 +1,30 @@
+package dev.lynxplay.ktp.adventure.translation.parser;
+
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationLocaleParserException;
+import net.kyori.adventure.translation.Translator;
+import org.apache.commons.lang3.StringUtils;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.Locale;
+
+/**
+ * An implementation of the {@link TranslationLocaleParser} that parses the locale of a file simply based on the base file name, ignoring the
+ * extension.
+ * <p>
+ * Example given:
+ * The file 'plugins/Example/language/en.json' would be parsed to {@link java.util.Locale#ENGLISH}.
+ * Notably this uses {@link net.kyori.adventure.translation.Translator#parseLocale(String)}, so country code and variants are also accepted.
+ */
+public final class FilenameTranslationLocaleParser implements TranslationLocaleParser {
+
+    @Override
+    public @NotNull Locale parseLocale(@NotNull Path path) throws TranslationLocaleParserException {
+        final var fileName = StringUtils.substringBeforeLast(path.getFileName().toString(), ".");
+        final var parsedLocale = Translator.parseLocale(fileName);
+        if (parsedLocale == null) throw new TranslationLocaleParserException("Failed to parse locale from " + path.getFileName().toString());
+
+        return parsedLocale;
+    }
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/JsonTranslationFileParser.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/JsonTranslationFileParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..333a05075a27386d008ac8974c2a51cd87fd084b
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/JsonTranslationFileParser.java
@@ -0,0 +1,83 @@
+package dev.lynxplay.ktp.adventure.translation.parser;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSyntaxException;
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationParseException;
+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Map;
+
+/**
+ * A json based implementation of the translation file parser.
+ * Json files are parsed by constructing the translation key as a combination of each node above a value.
+ * <p>
+ * Example given:
+ * <pre>
+ * {
+ *   "message": {
+ *     "player": {
+ *       "join": "You joined the game"
+ *     }
+ *   }
+ * }
+ * </pre>
+ * would be parsed into a single translation, namely the translation key 'message.player.join' mapped to 'You joined the game'.
+ */
+public final class JsonTranslationFileParser implements TranslationFileParser {
+
+    private static final int PATH_STRING_BUFFER_LENGTH = 256; // Allocating more characters to the string builder to hopefully avoid re-allocation
+    // while building.
+    private final Gson gsonInstance = new GsonBuilder().disableHtmlEscaping().create();
+
+    @Override
+    public @NotNull Map<String, String> parseTranslations(@NotNull Path file) throws TranslationParseException {
+        try (
+            final var inputStream = Files.newInputStream(file);
+            final var inputStreamReader = new InputStreamReader(inputStream)
+        ) {
+            final var result = new Object2ObjectOpenHashMap<String, String>();
+            final var root = gsonInstance.fromJson(inputStreamReader, JsonElement.class);
+
+            crawl(result, new StringBuilder(PATH_STRING_BUFFER_LENGTH), root);
+
+            return result;
+        } catch (final IOException e) {
+            throw new TranslationParseException("Failed to read the translation file", e);
+        } catch (JsonSyntaxException e) {
+            throw new TranslationParseException("Failed to parse the translation file's json file", e);
+        }
+    }
+
+    /**
+     * The crawl method is a recursive method that crawls through the entire tree represented by the passed element and stores each value found
+     * inside the passed flattenedMap.
+     *
+     * @param flattenedMap the result map that flattened values will be inserted into.
+     * @param path         the current path to the passed element onto which new elements should be appended.
+     * @param element      the current root element which should be crawled.
+     */
+    private void crawl(@NotNull final Map<String, String> flattenedMap, @NotNull final StringBuilder path, @NotNull final JsonElement element) {
+        if (element instanceof JsonObject jsonObject) {
+            for (final var entry : jsonObject.entrySet()) {
+                if (!path.isEmpty()) path.append("."); // Only pre-pend if the path already has elements
+                path.append(entry.getKey()); // Push path
+
+                crawl(flattenedMap, path, entry.getValue());
+
+                path.setLength(Math.max(0, path.length() - (entry.getKey().length() + 1))); // Drop path addition, might be -1 on the root element.
+            }
+        } else if (element instanceof JsonPrimitive jsonPrimitive) {
+            flattenedMap.put(path.toString(), jsonPrimitive.getAsString());
+        }
+    }
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/PropertiesTranslationFileParser.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/PropertiesTranslationFileParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..40f2218d978494fd5bfdbddab57bb422f5d09eb3
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/PropertiesTranslationFileParser.java
@@ -0,0 +1,41 @@
+package dev.lynxplay.ktp.adventure.translation.parser;
+
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationParseException;
+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Map;
+import java.util.PropertyResourceBundle;
+
+/**
+ * A properties-based implementation of the translation file parser.
+ * Since properties files cannot contain hierarchical data, the mappings are taken verbatim from the file.
+ * <p>
+ * Example given:
+ * <pre>
+ *  message.player.join=You joined the game
+ * </pre>
+ * would be parsed as a translation mapping the key 'message.player.join' to the value 'You joined the game'.
+ * </p>
+ */
+public final class PropertiesTranslationFileParser implements TranslationFileParser {
+
+    @Override
+    public @NotNull Map<String, String> parseTranslations(@NotNull Path file) throws TranslationParseException {
+        final var translations = new Object2ObjectOpenHashMap<String, String>();
+
+        try (final var reader = Files.newBufferedReader(file, StandardCharsets.UTF_8)) {
+            final var bundle = new PropertyResourceBundle(reader);
+            bundle.keySet().forEach(key -> translations.put(key, bundle.getString(key)));
+        } catch (final IOException e) {
+            throw new TranslationParseException("Failed to read the translation file", e);
+        }
+
+        return translations;
+    }
+
+}
diff --git a/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/YamlTranslationFileParser.java b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/YamlTranslationFileParser.java
new file mode 100644
index 0000000000000000000000000000000000000000..454b0e47c14103e05b5efdf88ccce965188ac6eb
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/adventure/translation/parser/YamlTranslationFileParser.java
@@ -0,0 +1,53 @@
+package dev.lynxplay.ktp.adventure.translation.parser;
+
+import dev.lynxplay.ktp.adventure.translation.exception.TranslationParseException;
+import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Map;
+
+/**
+ * A yaml based implementation of the translation file parser.
+ * Yaml files are parsed by constructing the translation key as a combination of each node above a value.
+ * <p>
+ * Example given:
+ * <pre>
+ * message:
+ *   player:
+ *     join: 'You joined the game'
+ * </pre>
+ * would be parsed into a single translation, namely the translation key 'message.player.join' mapped to 'You joined the game'.
+ */
+public final class YamlTranslationFileParser implements TranslationFileParser {
+
+    @Override
+    public @NotNull Map<String, String> parseTranslations(@NotNull Path file) throws TranslationParseException {
+        try {
+            final var fileContent = Files.readString(file, StandardCharsets.UTF_8);
+            final var result = new Object2ObjectOpenHashMap<String, String>();
+
+            final var yaml = new YamlConfiguration();
+            yaml.loadFromString(fileContent);
+
+            for (final var key : yaml.getKeys(true)) {
+                final var value = yaml.getString(key, null);
+                if (value == null) continue;
+
+                result.put(key, value);
+            }
+
+            return result;
+        } catch (final IOException e) {
+            throw new TranslationParseException("Failed to read the translation file", e);
+        } catch (InvalidConfigurationException e) {
+            throw new TranslationParseException("Failed to parse the translation file's yaml file", e);
+        }
+    }
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 03dfcb4665d0279c825a74f3f999c92fe2bd22cb..f2cbe385bba64d9dc4d2539bc2bda177fc5a0c60 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -398,6 +398,7 @@ public final class CraftServer implements Server {
     }
     // Paper end - Folia reagion threading API
 
+    private final dev.lynxplay.ktp.adventure.translation.PluginTranslators pluginTranslators; // KTP - plugin translators - server instance
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
         ConfigurationSerialization.registerClass(CraftPlayerProfile.class);
@@ -496,6 +497,7 @@ public final class CraftServer implements Server {
         this.potionBrewer = new io.papermc.paper.potion.PaperPotionBrewer(console); // Paper - custom potion mixes
         datapackManager = new io.papermc.paper.datapack.PaperDatapackManager(console.getPackRepository()); // Paper
         this.spark = new io.papermc.paper.SparksFly(this); // Paper - spark
+        this.pluginTranslators = new dev.lynxplay.ktp.adventure.translation.PluginTranslatorsImpl(); // KTP - plugin translators - server instance
     }
 
     public boolean getCommandBlockOverride(String command) {
@@ -3183,4 +3185,15 @@ public final class CraftServer implements Server {
     public void allowPausing(final Plugin plugin, final boolean value) {
         this.console.addPluginAllowingSleep(plugin.getName(), value);
     }
+
+    // KTP start
+    /**
+     * Returns the plugin translator of the server that plugins may use to register custom translations.
+     * @return the plugin translator instance.
+     */
+    @Override
+    public @org.jetbrains.annotations.NotNull dev.lynxplay.ktp.adventure.translation.PluginTranslators pluginTranslators() {
+        return this.pluginTranslators;
+    }
+    // KTP end
 }
