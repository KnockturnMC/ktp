From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <git@lynxplay.dev>
Date: Tue, 20 May 2025 01:19:23 +0200
Subject: [PATCH] Expose low level interceptor for vehicle steering

To allow plugins to run their own steering logic when a player is
steering an entity that, by vanilla's design choices, does not react to
vehicle movement packets, this patch introduces new API plugins can use
to handle these packets.

To keep the API as fast and lightweight as possible, the spigot event
bus was previously optimized and is now called off the main thread
before the packet even begins processing. While this obviously prevents
acceess to the world, it also allows intercepting events to prevent main
thread sync for these packets.

diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index aa0a61d7f3128543b698647663fa4a9af2a8255a..966f11a0f78a4b304e9f4ce2417ee07c667194cd 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2489,4 +2489,21 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return POINTERS_SUPPLIER.view(this);
     }
     // Paper end
+    // KTP start - expose low level steering interceptors
+    @Override
+    public org.bukkit.util.Vector computeCollisionCorrectedMovementFor(org.bukkit.util.Vector movement, org.bukkit.util.BoundingBox boundingBox) {
+        return org.bukkit.craftbukkit.util.CraftVector.toBukkit(
+            net.minecraft.world.entity.Entity.collideStatic(
+                org.bukkit.craftbukkit.util.CraftVector.toVec3(movement),
+                this.getHandle(),
+                new net.minecraft.world.phys.AABB(
+                    boundingBox.getMinX(), boundingBox.getMinY(), boundingBox.getMinZ(),
+                    boundingBox.getMaxX(), boundingBox.getMaxY(), boundingBox.getMaxZ()
+                ),
+                null
+            )
+        );
+    }
+    // KTP end - expose low level steering interceptors
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index fdfef69ad3e14eeb1d717bac8231e406b0309c3a..c3e17e1f153eaa34e40cb27d98a999627a590697 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1336,4 +1336,36 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.entity.get(io.papermc.paper.datacomponent.PaperDataComponentType.bukkitToMinecraft(type)) != null;
     }
 
+    // KTP start
+    @Override
+    public void move(@org.jetbrains.annotations.NotNull final dev.lynxplay.ktp.entity.MovementCause movementCause,
+                     @org.jetbrains.annotations.NotNull final Vector vector) {
+        final var internalMovementCause = switch (movementCause) {
+            case SELF -> net.minecraft.world.entity.MoverType.SELF;
+            case PLAYER -> net.minecraft.world.entity.MoverType.PLAYER;
+            case PISTON -> net.minecraft.world.entity.MoverType.PISTON;
+            case SHULKER -> net.minecraft.world.entity.MoverType.SHULKER;
+            case SHULKER_BOX -> net.minecraft.world.entity.MoverType.SHULKER_BOX;
+        };
+        this.entity.move(internalMovementCause, new net.minecraft.world.phys.Vec3(vector.getX(), vector.getY(), vector.getZ()));
+    }
+
+    @Override
+    public void physics(final boolean physics) {
+        this.entity.noPhysics = !physics;
+    }
+
+    @Override
+    public boolean physics() {
+        return !this.entity.noPhysics;
+    }
+
+    @Override
+    @org.jetbrains.annotations.NotNull
+    public Vector correctMovementForCollision(@org.jetbrains.annotations.NotNull Vector movement) {
+        return org.bukkit.craftbukkit.util.CraftVector.toBukkit(
+            this.entity.collide(org.bukkit.craftbukkit.util.CraftVector.toVec3(movement))
+        );
+    }
+    // KTP end
 }
