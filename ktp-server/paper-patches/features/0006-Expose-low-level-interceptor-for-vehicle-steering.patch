From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <git@lynxplay.dev>
Date: Tue, 20 May 2025 01:19:23 +0200
Subject: [PATCH] Expose low level interceptor for vehicle steering

To allow plugins to run their own steering logic when a player is
steering an entity that, by vanilla's design choices, does not react to
vehicle movement packets, this patch introduces new API plugins can use
to handle these packets.

To keep the API as fast and lightweight as possible, the spigot event
bus was previously optimized and is now called off the main thread
before the packet even begins processing. While this obviously prevents
acceess to the world, it also allows intercepting events to prevent main
thread sync for these packets.

diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index aae378697b2f2e388d2a5dfaca24c9197b8abf3e..30882415479396e6b53680dc58866eee91a0dddf 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2473,4 +2473,21 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return this.adventure$pointers;
     }
     // Paper end
+    // KTP start - expose low level steering interceptors
+    @Override
+    public org.bukkit.util.Vector computeCollisionCorrectedMovementFor(org.bukkit.util.Vector movement, org.bukkit.util.BoundingBox boundingBox) {
+        return org.bukkit.craftbukkit.util.CraftVector.toBukkit(
+            net.minecraft.world.entity.Entity.collideStatic(
+                org.bukkit.craftbukkit.util.CraftVector.toVec3(movement),
+                this.getHandle(),
+                new net.minecraft.world.phys.AABB(
+                    boundingBox.getMinX(), boundingBox.getMinY(), boundingBox.getMinZ(),
+                    boundingBox.getMaxX(), boundingBox.getMaxY(), boundingBox.getMaxZ()
+                ),
+                null
+            )
+        );
+    }
+    // KTP end - expose low level steering interceptors
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index b64902580c05a49e78d4f8e85a5ef677b498b2a8..83d69491efed83b91499240126448dbae25b2f5d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1316,4 +1316,36 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.entity.get(io.papermc.paper.datacomponent.PaperDataComponentType.bukkitToMinecraft(type)) != null;
     }
 
+    // KTP start
+    @Override
+    public void move(@org.jetbrains.annotations.NotNull final dev.lynxplay.ktp.entity.MovementCause movementCause,
+                     @org.jetbrains.annotations.NotNull final Vector vector) {
+        final var internalMovementCause = switch (movementCause) {
+            case SELF -> net.minecraft.world.entity.MoverType.SELF;
+            case PLAYER -> net.minecraft.world.entity.MoverType.PLAYER;
+            case PISTON -> net.minecraft.world.entity.MoverType.PISTON;
+            case SHULKER -> net.minecraft.world.entity.MoverType.SHULKER;
+            case SHULKER_BOX -> net.minecraft.world.entity.MoverType.SHULKER_BOX;
+        };
+        this.entity.move(internalMovementCause, new net.minecraft.world.phys.Vec3(vector.getX(), vector.getY(), vector.getZ()));
+    }
+
+    @Override
+    public void physics(final boolean physics) {
+        this.entity.noPhysics = !physics;
+    }
+
+    @Override
+    public boolean physics() {
+        return !this.entity.noPhysics;
+    }
+
+    @Override
+    @org.jetbrains.annotations.NotNull
+    public Vector correctMovementForCollision(@org.jetbrains.annotations.NotNull Vector movement) {
+        return org.bukkit.craftbukkit.util.CraftVector.toBukkit(
+            this.entity.collide(org.bukkit.craftbukkit.util.CraftVector.toVec3(movement))
+        );
+    }
+    // KTP end
 }
