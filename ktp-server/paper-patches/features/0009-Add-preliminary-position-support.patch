From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <git@lynxplay.dev>
Date: Tue, 20 May 2025 01:36:29 +0200
Subject: [PATCH] Add preliminary position support

The paper introduced position type is currently highly experimental
however, ktp and its consuming plugins aim to use this API.
For this, this patch adds fundamental support to the API for position
usage.

diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 966f11a0f78a4b304e9f4ce2417ee07c667194cd..0c09f7c7e18b9784ec8961c99831c84ddbfe2831 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -90,6 +90,7 @@ import org.bukkit.Note;
 import org.bukkit.Particle;
 import org.bukkit.Raid;
 import org.bukkit.Sound;
+import org.bukkit.SoundCategory;
 import org.bukkit.TreeType;
 import org.bukkit.World;
 import org.bukkit.WorldBorder;
@@ -1066,7 +1067,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public Collection<Entity> getNearbyEntities(Location location, double x, double y, double z) {
-        return this.getNearbyEntities(location, x, y, z, null);
+        return this.getNearbyEntities(location, x, y, z, (Predicate<? super Entity>) null); // KTP - preliminary position support
     }
 
     @Override
@@ -2506,4 +2507,20 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
     // KTP end - expose low level steering interceptors
 
+    // KTP start - preliminary position support
+    @Override
+    public void playSound(@org.jetbrains.annotations.NotNull final io.papermc.paper.math.Position position,
+                          @org.jetbrains.annotations.NotNull final Sound sound,
+                          @org.jetbrains.annotations.NotNull final SoundCategory category,
+                          final float volume,
+                          final float pitch) {
+        if (position == null || sound == null || category == null) return;
+
+        double x = position.x();
+        double y = position.y();
+        double z = position.z();
+
+        this.getHandle().playSound(null, x, y, z, CraftSound.bukkitToMinecraft(sound), SoundSource.valueOf(category.name()), volume, pitch);
+    }
+    // KTP end - preliminary position support
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/MaterialRerouting.java b/src/main/java/org/bukkit/craftbukkit/legacy/MaterialRerouting.java
index db8d8e2a07296d62c3097f02b03319e2e1ba9394..a477689e61bf447837d4dab6e92598234072eecf 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/MaterialRerouting.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/MaterialRerouting.java
@@ -527,6 +527,16 @@ public class MaterialRerouting {
         return MaterialRerouting.transformFromBlockType(regionAccessor.getType(location), version);
     }
 
+    // KTP start - initial position support
+    public static Material getType(RegionAccessor regionAccessor, io.papermc.paper.math.Position location, @InjectPluginVersion ApiVersion version) {
+        return MaterialRerouting.transformFromBlockType(regionAccessor.getType(location), version);
+    }
+
+    public static void setType(RegionAccessor regionAccessor, io.papermc.paper.math.Position location, Material material) {
+        regionAccessor.setType(location, MaterialRerouting.transformToBlockType(material));
+    }
+    // KTP end - initial position support
+
     public static Material getType(RegionAccessor regionAccessor, int x, int y, int z, @InjectPluginVersion ApiVersion version) {
         return MaterialRerouting.transformFromBlockType(regionAccessor.getType(x, y, z), version);
     }
