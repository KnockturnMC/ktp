From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <git@lynxplay.dev>
Date: Tue, 20 May 2025 00:21:11 +0200
Subject: [PATCH] Expose low level interceptor for vehicle steering

To allow plugins to run their own steering logic when a player is
steering an entity that, by vanilla's design choices, does not react to
vehicle movement packets, this patch introduces new API plugins can use
to handle these packets.

To keep the API as fast and lightweight as possible, the spigot event
bus was previously optimized and is now called off the main thread
before the packet even begins processing. While this obviously prevents
acceess to the world, it also allows intercepting events to prevent main
thread sync for these packets.

diff --git a/src/main/java/dev/lynxplay/ktp/entity/MovementCause.java b/src/main/java/dev/lynxplay/ktp/entity/MovementCause.java
new file mode 100644
index 0000000000000000000000000000000000000000..8c302b7790ffa9b1be42b35a5f7ae99703e33bda
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/entity/MovementCause.java
@@ -0,0 +1,31 @@
+package dev.lynxplay.ktp.entity;
+
+/**
+ * Represents the existing types of causes as to why an entity may move in the world.
+ */
+public enum MovementCause {
+    /**
+     * Indicates that the entity moved on its own behalf.
+     */
+    SELF,
+
+    /**
+     * Indicates that the entity was moved by a player, such as the player client moving its own player entity.
+     */
+    PLAYER,
+
+    /**
+     * Indicates that the entity was moved by a piston extending in the world.
+     */
+    PISTON,
+
+    /**
+     * Indicates that the entity was moved by a shulker box block entity opening.
+     */
+    SHULKER_BOX,
+
+    /**
+     * Indicates that the entity was moved by a shulker entity opening.
+     */
+    SHULKER;
+}
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 66a31c5d83b78dddb43e70cfd5ce7c7fb8a551b6..e0a6a25c5a46c7f30d6c067c0e283ea71bfd027e 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1261,4 +1261,34 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     void broadcastHurtAnimation(@NotNull java.util.Collection<Player> players);
     // Paper end - broadcast hurt animation
+    // KTP start
+
+    /**
+     * Moves the entity by a given vector in its world as if it moved itself.
+     * This method will respect blocks in the world during movement and validate further movement associated checks.
+     * The logic is hence *not* safe to be run off the servers main thread.
+     *
+     * @param movementCause the cause for was responsible for the movement of the entity.
+     * @param vector        the vector the entity should move by.
+     */
+    void move(@NotNull dev.lynxplay.ktp.entity.MovementCause movementCause, @NotNull Vector vector);
+
+    /**
+     * Updates whether this entity should properly tick its physics when moving in the world.
+     * If an entity has physics disabled, its movement will simply change its location in the world without checking collisions or blocks around it.
+     * <p>
+     * Physics are not persisted in the entities data, causing this value to be reset to its default when the entity is loaded again from file.
+     *
+     * @param physics the new boolean value indicating whether the entity should process its physics.
+     */
+    void physics(boolean physics);
+
+    /**
+     * Provides whether this entity is properly ticking its physics when moving in the world.
+     * If an entity has physics disabled, its movement will simply change its location in the world without checking collisions or blocks around it.
+     *
+     * @return the boolean value indicating whether the entity is processing its physics.
+     */
+    boolean physics();
+    // KTP end
 }
