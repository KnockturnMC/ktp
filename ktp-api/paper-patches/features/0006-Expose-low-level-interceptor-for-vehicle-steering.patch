From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bjarne Koll <git@lynxplay.dev>
Date: Tue, 20 May 2025 00:21:11 +0200
Subject: [PATCH] Expose low level interceptor for vehicle steering

To allow plugins to run their own steering logic when a player is
steering an entity that, by vanilla's design choices, does not react to
vehicle movement packets, this patch introduces new API plugins can use
to handle these packets.

To keep the API as fast and lightweight as possible, the spigot event
bus was previously optimized and is now called off the main thread
before the packet even begins processing. While this obviously prevents
acceess to the world, it also allows intercepting events to prevent main
thread sync for these packets.

diff --git a/src/main/java/dev/lynxplay/ktp/entity/MovementCause.java b/src/main/java/dev/lynxplay/ktp/entity/MovementCause.java
new file mode 100644
index 0000000000000000000000000000000000000000..8c302b7790ffa9b1be42b35a5f7ae99703e33bda
--- /dev/null
+++ b/src/main/java/dev/lynxplay/ktp/entity/MovementCause.java
@@ -0,0 +1,31 @@
+package dev.lynxplay.ktp.entity;
+
+/**
+ * Represents the existing types of causes as to why an entity may move in the world.
+ */
+public enum MovementCause {
+    /**
+     * Indicates that the entity moved on its own behalf.
+     */
+    SELF,
+
+    /**
+     * Indicates that the entity was moved by a player, such as the player client moving its own player entity.
+     */
+    PLAYER,
+
+    /**
+     * Indicates that the entity was moved by a piston extending in the world.
+     */
+    PISTON,
+
+    /**
+     * Indicates that the entity was moved by a shulker box block entity opening.
+     */
+    SHULKER_BOX,
+
+    /**
+     * Indicates that the entity was moved by a shulker entity opening.
+     */
+    SHULKER;
+}
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index ae342a5cebf12b0c6fea3171d8035b75bc7a00e8..a7010fe945b34eec68837a8d59b849a97e4ba1a8 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -4473,4 +4473,18 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
             }
         }
     }
+
+    // KTP start - expose low level steering interceptors
+    /**
+     * Computes the corrected movement for the passed bounding box if it were to move by the passed movement.
+     * This method mirrors {@link Entity#correctMovementForCollision(Vector)}, however, accepts a custom bounding box.
+     *
+     * @param movement the movement vector the bounding box would move by.
+     * @param boundingBox the bounding box at its location prior to the movement described by the passed vector.
+     *
+     * @return the corrected movement vector.
+     */
+    @NotNull
+    Vector computeCollisionCorrectedMovementFor(@NotNull Vector movement, @NotNull BoundingBox boundingBox);
+    // KTP end - expose low level steering interceptors
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 0aa51b777fd28444b53ccc74362798553954c52d..d188b0bf30959a180bc1dd578e5a1225b4d15858 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1261,4 +1261,46 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     void broadcastHurtAnimation(@NotNull java.util.Collection<Player> players);
     // Paper end - broadcast hurt animation
+    // KTP start
+
+    /**
+     * Moves the entity by a given vector in its world as if it moved itself.
+     * This method will respect blocks in the world during movement and validate further movement associated checks.
+     * The logic is hence *not* safe to be run off the servers main thread.
+     *
+     * @param movementCause the cause for was responsible for the movement of the entity.
+     * @param vector        the vector the entity should move by.
+     */
+    void move(@NotNull dev.lynxplay.ktp.entity.MovementCause movementCause, @NotNull Vector vector);
+
+    /**
+     * Updates whether this entity should properly tick its physics when moving in the world.
+     * If an entity has physics disabled, its movement will simply change its location in the world without checking collisions or blocks around it.
+     * <p>
+     * Physics are not persisted in the entities data, causing this value to be reset to its default when the entity is loaded again from file.
+     *
+     * @param physics the new boolean value indicating whether the entity should process its physics.
+     */
+    void physics(boolean physics);
+
+    /**
+     * Provides whether this entity is properly ticking its physics when moving in the world.
+     * If an entity has physics disabled, its movement will simply change its location in the world without checking collisions or blocks around it.
+     *
+     * @return the boolean value indicating whether the entity is processing its physics.
+     */
+    boolean physics();
+
+    /**
+     * Corrects the passed movement in accordance with in-world collisions.
+     * An entity moving up by [0,1,0] with a block directly above its bounding box, would hence have a corrected move vector of [0,0,0] as
+     * no movement upwards is possible.
+     *
+     * @param movement the originally wanted movement vector.
+     *
+     * @return the corrected vector for movement.
+     */
+    @NotNull
+    Vector correctMovementForCollision(@NotNull Vector movement);
+    // KTP end
 }
